#ifndef GPSDataTypes_idl
#define GPSDataTypes_idl

#include "InterfaceDataTypes.idl"


module GPS{

    enum EarthEllipsoidType
    {
        WGS84;  /// Mainly used by GPS
        GRS80;  /// Mainly used in America, Europe and Japan
        BESSEL;  /// Mainly used in Japan until 2002
        SK42;  /// Mainly used in Russia
        PZ90;  /// Used by GLONASS
    };
    
    /// playerÇ≈ÇÕ0,1,2Ç∆íËã`Ç≥ÇÍÇƒÇ¢ÇÈÅD
    enum QuorityOfGPS
    {
        UNREVEIVABLE;
        INDEPENDENT_POSITIONING;
        DGPS;
    };

    struct GPSData
    {
        /// Longitude from GPS
        double longitude;
        /// Latitude from GPS
        double latitude;
        /// Variance of GPS Data
        double variance;
        /// Antenna altitude from average sea level 
        double altitude;
        /// quality of gps,
        QuorityOfGPS quority;
        /// Number of satellite
        unsigned short satellite;
        /// Data received timestamp [ms]
        unsigned long receivedTimestamp;
        /// UTM coordinate, east [m]
        double utm_east;
        /// UTM coordinate, north [m]
        double utm_north;
        /// pdop. pdop^2 = vdop^2 + hdop^2
        double pdop;
        double rdop;
        double gdop;
        /// vdop
        double vdop;
        /// hdop
        double hdop;
        /// Earth ellipsoid
        EarthEllipsoidType earth_ellipsoid_type;
        /// Ground speed
        double ground_speed;
        /// direction
        unsigned double direction;
    };

    /*!
     * @struct TimedGPSData
     * @brief GPS data include time and accuracy
     */
    struct TimedGPSData
    {
        /// Time stamp. 
        RTC::Time tm;
        /// GpsData
        GPSData Data;
    };

    interface GPSModule
    {
        InitGPSReturnStatus initGPSPosition();

        GPSReturnStatus getGPSData();
    };
};

#endif